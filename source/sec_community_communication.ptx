<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="sec_community_communication"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>OSS Community Communication</title>
    <introduction>
        <p>Communication in an open-source community takes many forms, but all of these break down into two broad categories: synchronous (simultaneous, e.g. in person meetings or video conference meetings) and asynchronous (non-simultaneous, e.g. email or various kinds of messaging services). Due to the geographically-dispersed nature of most communities, most OSS communication makes heavy use of asynchronous technologies. Synchronous communications typically includes various forms of audio/video chat, which is neither convenient nor efficient for widely dispersed OSS communities. Asynchronous communications are much more varied and most OSS communities use more than one asynchronous form of communication. When a software team is made of full-time people who all work the same hours in the same office building, it is easier to have a higher proportion of synchronous discussion, but when some contributors are sleeping while others are working, it is far harder, so it is not a big surprise that the vast majority of OSS communication is asynchronous.
    </p>
    </introduction>
    <subsection xml:id="subsec_website">
        <title>Websites</title>
        <p>
          The first place where people discover an OSS community is typically a website.  To make a website available to all users, it must be hosted on a web server referred to as a 
            <term>host</term> that serves the page.          
          Unfortunately, the nature of traditional HTML pages is that they are often a static, one-to-many form of communication created by a small number of people with write access to the server. This leads to websites that can become quickly outdated and which do not truly reflect the collaborative nature of the community. We will see how OSS communities work around this issue and make their website a collaborative project in the next section.
        </p>
        <p>
          All OSS communities need to have their code hosted in a place where it can be viewed and potentially contributed to. This is where software engineering collaboration platforms step in. 
        </p>

    </subsection>
    <subsection xml:id="subsec-secp">
        <title>Software Engineering Collaboration Platforms (SECP)</title>
        <p>
          <idx>Software Engineering Collaboration Platforms (SECP)</idx>
          Virtually every open source community uses a 
            <term>Software Engineering Collaboration Platform (SECP)</term> such as 
            <url href="https://github.com/" visual="github.com/">GitHub</url>, 
            <url href="https://gitea.io/" visual="gitea.io">Gitea</url>, 
            <url href="https://gitlab.com/" visual="gitlab.com/">GitLab</url>, or 
            <url href="https://bitbucket.org/" visual="bitbucket.org">Bitbucket</url>, each of which provides a comprehensive collection of features that are required for software development in OSS communities. These features arise naturally from the need store code, to discuss issues related to the code, to employ version control, and other needs: 
            <ul>
                <li>
                    <title>Repositories</title>
                    <p>
                      <idx>repository / repo </idx>
          It goes without saying that an OSS needs to store the code base in a way that it can be accessed by the community of current and potential contributors. A 
                        <term>repository</term>, aka 
                        <term>repo</term>, is a file storage location used by a version control system to keep track of not only versions of the code base itself but also to keep track of project documentation, discussions, web pages, and more. Repos are nearly always hosted in a SECP, although they are also sometimes self-hosted by the project.
        
                    </p>
                </li>
                <li>
                    <title>Issue Trackers</title>
                    <p>
                      <idx>issue trackers</idx>
                      <term>Issue trackers</term> are designed to record, track, and resolve bugs, feature requests, questions, etc.
                      After an issue is posted, discussions on the issue typically occur and are sometimes prolonged. These discussions are most conveniently attached to the issue itself to facilitate the tracking of the discussion, which is particularly important in larger projects. When an issue is posted, it can be discussed by the community to decide on how to proceed with it. The issue can be categorized and linked to other discussions, projects, and engineering work as well. You are definitely advised to read all unresolved issues before posting so you are not duplicating another existing issue. 
                    </p>
                    <p>
                      A number of features exist in most issue trackers that facilitate communication among contributors and potential contributors. These include linking, labelling, mentioning a particular user, etc.
                    </p>
                    <p>
                      One important feature that exists in issue trackers is the ability to <term>label</term> the issue with one or more of a set of labels. Github, for example, provides the following default labels:
                      <ul>
                        <li>
                          <p>
                            <em>bug</em>: indicates an unexpected problem or unintended behavior.
                          </p>
                        </li>
                        <li>
                          <p>
                            <em>documentation</em>: indicates a need for improvements or additions to documentation.
                          </p>
                        </li>
                        <li>
                          <p>
                            <em>duplicate</em>: indicates similar issues, pull requests, or discussions. These related items are then typically linked for convenience. 
                          </p>
                        </li>
                        <li>
                          <p>
                            <em>enhancement</em>: indicates new feature requests.
                          </p>
                        </li>
                        <li>
                          <p>
                            <em>good first issue</em>: indicates a good issue for first-time contributors. <em>The mere presence of this label indicates an openness to new contributors, so this is a very important label to look for when you are a potential new contributor.</em> 
                          </p>
                        </li>
                        <li>
                          <p>
                            <em>help wanted</em>: indicates that a maintainer wants help on an issue or pull request.
                          </p>
                        </li>
                        <li>
                          <p>
                            <em>invalid</em>: indicates that an issue, pull request, or discussion is no longer relevant.
                          </p>
                        </li>
                        <li>
                          <p>
                            <em>question</em>: indicates that an issue, pull request, or discussion needs more information.
                          </p>
                        </li>
                        <li>
                          <p>
                            <em>wontfix</em>: indicates that work won't continue on an issue, pull request, or discussion.
                          </p>
                        </li>
                      </ul>
                      Note that although the above default labels are included in every new Github repository, maintainers may or may not use all of them, and many maintainers choose to edit or delete some of the default labels and/or add their own custom labels that make sense for that project.
                    </p>

                </li>

                <li>
                    <title>Merge Requests</title>
                    <p>
                      <idx>merge request / pull request</idx>
          Software developers use the term 
                        <term>merge request</term> or 
                        <term>pull request (PR)</term> to describe a request to initiate the process of requesting an integration of specific code changes into the project repository. Best practice before making a merge request is to have initiated an earlier discussion using one of the forms of communication favored by the project. After this discussion, a (potential) contributor opens a merge request, which may then undergo several iterations of automatic checks, manual code reviews by one or more other contributor, as well as further discussion.
        
                    </p>
                    <p>
          It is important to understand that even in the best of circumstances, the typical merge request initiates further discussion and/or recommendation(s) for improvements from the core team of the OSS project. To those new to the OSS world, these discussions may come as a surprise, but they should not. Even then the core OSS term is likely to ask for further refinements. This is normal and to be expected.
        </p>
                </li>
                <li>
                    <title>Project Boards</title>
                    <p>
                      <idx>project board</idx>
          A 
                        <term>project board</term> facilitates organization of project tasks. Project boards typically utilize a visual tool similar to the 
                        <url href="https://en.wikipedia.org/wiki/Kanban" visual="en.wikipedia.org/wiki/Kanban">Kanban</url> scheduling system used in lean manufacturing. SECPs provide such boards, and many projects use the ones provided in their SECP. However, some projects use an external tool like 
                        <url href="https://trello.com/" visual="trello.com">Trello</url> or one of the open source alternatives such as 
                        <url href="https://kanboard.org/" visual="kanboard.org">Kanboard</url> or 
                        <url href="https://www.taiga.io/" visual="taiga.io">Taiga</url>. These project boards are typically made up of things like issues, merge requests, files, tags, and notes that are categorized as cards which are organized into columns. Most platforms offer a lot of flexibility, so one can add tags, set deadlines, search, reorder columns, reorder cards within a column, move cards from one column to another column, etc. The project boards at: 
                        <url href="https://github.com/microsoft/vscode/projects?type=classic" visual="microsoft/vscode/projects?type=classic">Microsoft VSCode Project Boards</url> and 
                        <url href="https://github.com/orgs/Homebrew/projects?type=classic" visual="github.com/orgs/Homebrew/projects?type=classic">Homebrew Project Boards</url>, and 
                        <url href="https://github.com/NixOS/nixpkgs/projects?type=classic" visual="github.com/NixOS/nixpkgs/projects?type=classic">NixOS Project Boards</url> offer good examples of projects that use the SECP's project boards.
                    </p>
                    <p> 
                       If you wonder why some projects don't seem to use project boards, consider that in many OSS projects, there are no paid project leaders who can set goals, organize all of the issues into boards, prioritize tasks, etc. For the majority of OSS projects, there either isn't time to take manage project boards or the project is too small to derive much benefit from their use.
                    </p>
                </li>
            </ul>
                <p>
          One of the many features these software engineering collaboration platforms (SECP) sometimes offer is web hosting, which when enabled, facilitates structured collaborative editing of the site. As an example, 
          <url href="https://pages.github.com/" visual="pages.github.com">GitHub Pages</url> affords hosting as a website for projects that are managed on GitHub. This means that OSS communities can use their SECP of choice as their a host for their website as well.
        </p>
        </p>
    </subsection>
    <subsection xml:id="subsec-other-tools">
        <title>Other Asynchronous Communication Tools</title>
        <p>
          Many other communication tools exist in OSS, but the following are some of the most prevalent:
        </p>
        <ul>
           
            <li>
                <title>Collaborative Instant Messaging Platforms</title>
                <p> 
                  <idx>collaborative instant messaging platforms</idx>
                  In recent times, <term>collaborative instant messaging platforms</term> like 
                    <url href="https://discord.com/" visual="discord.com">Discord</url>, 
                    <url href="https://matrix.org/" visual="matrix.org">Matrix</url>, 
                    <url href="https://mattermost.com/" visual="mattermost.com">Mattermost</url>, 
                    <url href="https://slack.com/" visual="slack.com">Slack</url>, and others have become very heavily leveraged in OSS communities. Each of these platforms has their own flavor, and the choice of which of these to use is largely driven by the OSS community. Discord was originally favored by gamers. Matrix is decentralized, open source, offers end-to-end encryption, and is the primary choice for some larger projects like 
                    <url href="https://wiki.mozilla.org/Matrix" visual="wiki.mozilla.org/Matrix">Firefox</url>. Mattermost is also open source and is most proud of being dedicated to security, so the Mattermost website highlights users like the US Department of Defense. Slack was developed for for professional and organizational communications, and is also very heavily utilized by many OSS projects. Some commonalities across all of these collaborative instant messaging platforms is that communication is carried out in channels which individual users are placed in or choose to join.  In addition to human users, various services and 
                    <term>bots</term> (programs providing automation) are present in many channels. Nicknames or handles are used, although in some OSS communities, the handles must adhere to the rules of the project (e.g. being identical to your handle on the project's SECP).

                </p>
            </li>
 <li>
                <title>Wikis</title>
                <p>
                  <idx>Wikis</idx>
                  Although <term>wikis</term> can be created within many of the SECPs, the concept of a wiki is widely used and understood outside of SECPs as well, largely due to the wide popularity of 
                    <url href="https://www.wikipedia.org/" visual="wikipedia.org">Wikipedia</url>  and 
                    <url href="https://www.wikimedia.org/" visual="wikimedia.org">WikiMedia</url>. Simply stated, a wiki is a website where the pages are a user-editable, easy-to-use, asynchronous way of putting semi-permanent content on the web, so they are useful for documentation, timelines, status reports, meeting minutes, and conversation logs. A wiki provides easy version control, a database backend, simplified markup, and a fast edit-and-post cycle. Having said this, the use of wikis for OSS projects have fallen largely out of favor in place of having markdown files in the code repository since markdown allows using the same tools such as merge requests, which has the additional benefit that changes to the documentation can be part of the merge request that introduces the relevant change.

    
                </p>
                <!--     <exercise xml:id="exercise-project-wikis"><title>Exercise: Project Wikis</title><p>Wikis are meant to be community spaces where everyone can join in. They grown and are made better through community participation. For this exercise, we&#8217;re going to encourage you to check out the wikis of three established open source projects.
    </p> -->
                <p>
                    <!--    <title>What wiki software are they using?</title><ol><li>
        Link to the main wiki.
      </li><li>
        Search in the wiki for the history and current structure of the project. Is it in the wiki, or is it somewhere else in their project?
      </li><li>
        When the last change was made, who made it, and how often are changes submitted. Would you describe this wiki as &#8220;thriving&#8221; or &#8220;languishing&#8221;?
      </li></ol> -->
                </p>
            </li>
            <li>
              
                <title>IRC</title>
                <idx>IRC</idx> 
                <p>
                  
                  <term>IRC</term> stands for Internet Relay Chat. IRC is one of the older means of synchronous communication between people working on a OSS project, and although in the past it was one of the primary OSS communication tools, many projects have abandoned IRC for collaborative instant messaging platforms and other newer communication tools. It's a text-based federated chat system where clients connect to the servers of one or more networks, and the servers relay messages between themselves within each network (hence the name). Communication is done in channels which individual users join, and users are identified by nicks (nicknames). In addition to human users, like collaborative instant messaging platforms, various services and bots are present in many channels. However, it is very lightweight because the focus is solely on the textual content, which means it can work right from your command line. However, there is no formatting, not even new lines, no emojis, no voice or video chat, and unlike most more modern chat technologies where recordings can be automated, messages aren't easily stored, so it is designed to work only for synchronous communication.
 </p>
                <!-- <p>To use IRC, you&#821actually7;ll need an IRC client; Wikipedia maintains an excellent list of options. We recommend installing a few on your system and trying them out to see which one you prefer. You&#8217;ll need to select a nickname (nick or handle) &#8212; choose wisely, because you&#8217;ll want to keep your nick for the long run. It&#8217;s strongly recommended that you register your nick so that other people cannot masquerade as you.</p><p>There are a handful of IRC networks used in open source, including ones operated by large projects (such as irc.mozilla.org) and ones which are operated by organizations and shared by many different communities (such as irc.freenode.net and irc.oftc.net). These are open channels and may be logged by one or more entities. Consider anything you say in IRC to be as public as if you said it on a busy street corner, with a megaphone, and seven people videotaping everything.</p><p>Most IRC clients let you perform operations using menus/hotkeys or by typing commands. Commands start with a slash (&#8220;/&#8221;) to distinguish them from text that you are typing into the chat session. Since the commands are the same in all IRC clients, it&#8217;s worthwhile becoming familiar with them &#8212; here are some of the basics:</p><ul><li>/connect server &#8211; connect to the named IRC server.</li><li>/list &#8211; lists available channels. Channel names start with &#8220;#&#8221; (official channels) or &#8220;##&#8221; (unofficial channels).</li><li>/join channel &#8211; join the listed channel on the server to which you are connected.</li><li>/me action &#8211; reports your nick as performing an action.</li><li>/leave reason &#8211; leave the current channel, citing the reason given (optional).</li><li>/quit reason &#8211; leave the server, citing the reason given (optional).</li></ul><p>Any text you type that does not begin with a slash is taken to be text, and is entered into the conversation.</p><p>It is normal to join a channel and say nothing. In fact, it is expected: don&#8217;t join a channel and say &#8220;hi&#8221; or leave and say &#8220;bye&#8221; &#8212; you may be interrupting a conversation already underway. Feel free to join as many channels as you like, once you&#8217;re comfortable with IRC.</p><p>It is fine to join a channel and sit there idle for a long time, lurking. You might never say anything; this is a good way for you to learn about who is in the channel, what they are talking about, etc. Listening is often more important than talking, because you learn more.</p><p>If you have a question you should just ask it rather than saying, &#8220;Can I ask a question about &#8230;&#8221; or &#8220;Does anyone know about &#8230;&#8221;. You don&#8217;t need to direct general questions to a specific person. Rather, you should ask in the channel in general, and someone usually answers you:</p><pre>
      don: How do I ask a question?
      funny_guy: don, you just did!
    </pre><p>If there are several conversations taking place at the same time, it&#8217;s customary to put the nick of the user you are directing your comment to at the start of the line (as shown in the second line above); most IRC clients send a special alert to a user whose nick is &#8220;spoken&#8221; in a channel. Most IRC clients also auto-complete the nick when you press the <strong>[Tab]</strong> key, so you could type fun[Tab] to fill in the nick &#8220;funny_guy&#8221;.</p><p>Channels generally have a purpose, and people are often joined to many different channels at once.  You&#8217;ll see many of the same people in different channels.  However, what might be appropriate in one channel often isn&#8217;t in another.  When you enter a channel, take a look at its Topic (displayed at the top, or with the /topic command) for clues.</p><p>Generally you should avoid small-talk unless you are sure that it is appropriate. Even if you see others in the channel doing it, don&#8217;t take that to mean that you should (i.e., channel veterans can get away with things newcomers can&#8217;t!). At the same time, be ready for a playful and (at times) very sarcastic environment.</p><p>Also be aware that you never know who you are talking to based on their nicks (you learn who people are later, as you get to know people&#8217;s nicks), and avoid making assumptions about people in the channel.</p><exercise><title>Exercise: Learning IRC</title><p>Install one or more IRC clients. Find out which network(s) and channel(s) are used by the three open source communities that operate the wikis you investigated. Choose a nick and connect to those networks and channels. Leave your IRC client open for at least 24 hours, and observe the patterns of conversation and key participants. Have a discussion in at least one of the channels, and blog about your experience, including an excerpt from your conversation.</p></exercise> -->
            </li>
            <li>
                <title>Blogs</title>
                <p>
                  A <term>blog</term> is in some ways similar to a website in appearance. Websites provide semi-permanent places for content which is updated and replaced as needed. While in a blog, new articles that are published add to the content rather than replacing it (although existing posts can be updated as well if things change). Blogs provide a flow of transient, in-the-moment news, commentary, and technical articles which is posted by date, with past posts still available. Because many open source participants write blogs, it is sometimes difficult to keep up with them on a larger project. The volume of blog postings created within a community can be overwhelming. To help deal with this, RSS feeds enable the receipt of content in a machine-readable format so that it can be used in a variety of different ways through a service called a RSS feed aggregator. A few open-source community also maintain a Planet site which aggregates the feeds from that community into a single page (and the Planet, in turn, provides an aggregated feed). Here are some examples: 
                    <url href="https://planet.mozilla.org" visual="planet.mozilla.org">The Mozilla Planet</url>, 
                    <url href="http://fedoraplanet.org/" visual= "planet.fedoraproject.org">The Fedora Planet</url>, and 
                    <url href="https://planet.documentfoundation.org/" visual="https://planet.documentfoundation.org/">The Document Foundation Planet</url>.
                </p>
                <p>
                  As you get into OSS, you may want to share your news and opinions with others via a blog. Remember to represent your thoughts professionally, bearing in mind that the Internet is semi-permanent. If you don't want a potential future employer to see what you write, don't post it because <url href="https://archive.org/" visual="archive.org">the Internet Archive</url> and/or other crawlers may capture it forever.
                </p>
                <!-- <ul><li>Write professionally. Blog postings are less formal than other types of writing, but they are still a reflection of your communications skills.</li><li>Remember that the internet has a long memory. The Planet page is generated periodically, and even if you delete or change your posting, it may be indexed, cached, or reposted until the planet is re-generated. Avoid saying something that might come back to haunt you later &#8212; and remember that future employers may read your old postings (as well as future in-laws, office mates, and so forth).</li><li>Do not use profane, obscene, or rude content, or content that belittles other people.</li><li>Do not link to profane, obscene, rude, or illegal material or to sites that knowingly violate intellectual property rights (warez).</li><li>Ensure that each posting makes sense when taken out of the context of your blog and viewed on its own. If you are referring to one of your previous posts, link to it rather than refer to it as being &#8220;below&#8221; or &#8220;above&#8221;.</li><li>Link extensively. If you're referring to a blog post, article, video, event, command, software package, person, project &#8212; link to all of them so that your readers can find out more information.</li><li>Ensure that each posting conforms to your community or institution's policies.</li><li>Keep the postings relevant to your open source work. Use tagging/categories to keep deeply off-topic posts off your planet feeds.</li></ul> -->
                <!--     <exercise><title>Exercise: Linking your Blog to Planets</title><p>In the introduction, you created a blog for yourself. Add that blog to your class planet, if there is one. Monitor the planets operated by the communities that run the wikis you investigated, and create a blog posting of your own with your observations of the community planets.</p></exercise> -->
            </li>
            <li>
                <title>Mailing Lists and Forums</title>
                <p>
                  <idx>Mailing Lists and Forums</idx>
                  You likely know that an electronic mailing list is a collection of names and email addresses used to send material to multiple recipients typically given a single email address for the list. Open source communities that use email lists tend to use discussion lists (which allow for replies) rather than announcement lists (which are one way) to engage their communities. An example of an open source project that leverages email lists heavily for discussions is 
                  <url href="https://www.debian.org/MailingLists/" visual="www.debian.org/MailingLists">Debian</url>. Note that all emails sent to the Debian lists are distributed both to the list subscribers as well as copied to the public archive, so people to browse or search without the need to be subscribed.
                </p>
                <p>
                  People on an email list typically use their real name. Surprisingly, there is a significant variation from community to community in terms of list etiquette and even the amount of participation on lists.
      </p>
                <p>
                  An open-source participant subscribed to several lists in multiple communities can easily receive thousands of messages a day. For this reason, many people choose to use a separate mailbox or use filtering rules to keep their mail under control or sign up to receive only a regular "digest" of the messages.
    </p>
                <p>
                  Email lists are sometimes managed through online list service providers such as Google Groups, but are often managed through private installations of list management software such as the open source 
                  <url href="https://www.gnu.org/software/mailman/" visual="gnu.org/software/mailman/">GNU Mailman</url>, which provide subscriber management, bounce control, and web-accessible archiving.
    
                </p>
                <p>Web-based forums have some similarities to email lists because users can subscribe to receive updates via email. However, conversations in forums are typically grouped by discussion topic and are often better-organized than email archives, which makes them easier to browse and search. People on a  forum typically have handles or nicknames, rarely using their full real name, unlike in email. Many OSS communities have one or more forums specific to various aspects of the project. There are also forums that span multiple OSS communities. For example, <url href="https://itsfoss.community/" visual="itsfoss.community">It's FOSS Community</url> is an example of an active forum on FOSS.
    
                </p>
                <p>
                Other OSS communities use related communication technologies such as newsgroups and listservs which serve some of the same purposes as mailing lists and forums and often offer e-mail notifications as well.
    </p>
            </li>
        </ul>
        <exercise>
            <title>Exercise: Joining the Discussion</title>
            <p>Subscribe to at least one communication venue from each of the three open source communities you are observing, and read through the last few months of messages or message archives for each list. Blog your observations of their communication.</p>
        </exercise>
    </subsection>
    <subsection xml:id="subsec-synchronous_communication">
        <title>Synchronous Communications</title>
        <p>
          Although pretty much all OSS communities use asynchronous communication, there are some OSS communities that also leverage synchronous communication. Sometimes these sessions are for just a small set of core developers, but other times these are open to all. For example, both the open source textbook platform 
          <url href="https://blog.runestone.academy/" visual="blog.runestone.academy/">Runestone Academy</url> and the open source authoring language 
          <url href="https://pretextbook.org/" visual="pretextbook.org/">PreText</url> offer video drop in "office hours" open to users and contributors alike. However, as mentioned above, these are not going to be convenient from all regions of the globe, so both of these communities also utilize asynchronous communication methods. Runestone Academy uses Discord, while Pretext uses Google Groups for several very active mailing lists.
    
        </p>
    </subsection>
    <conclusion>
        <title>Drawing Conclusions</title>
        <p>We learn to read before we learn to write; in the same way, the best way to start working with an open source community is to observe that community in action. As you have completed the exercises in this chapter, you should have started to form an impression about the communities that you have been observing.
    </p>
    </conclusion>
    <exercise>
        <title>Exercise: Share Your Thoughts</title>
        <p>Write a blog post summarizing your thoughts about the communities you've been observing. Specifically note your conclusions about the qualities of the community identified earlier.</p>
    </exercise>
</section>
